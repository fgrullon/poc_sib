services:
  postgres_db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_db/init_db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow_webserver:
    build: ./orchestration_service
    restart: always
    ports:
      - "8080:8080"
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}_airflow
      AIRFLOW__WEBSERVER__RBAC: "True"
      AIRFLOW__WEBSERVER__AUTH_BACKEND: 'airflow.contrib.auth.backends.password_user_backend'
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./orchestration_service/app/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow/airflow.db
    entrypoint: /usr/local/bin/airflow-init.sh
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 3

  airflow_scheduler:
    build: ./orchestration_service
    restart: always
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}_airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    depends_on:
      postgres_db:
        condition: service_healthy
      airflow_webserver:
        condition: service_healthy
    volumes:
      - ./orchestration_service/app/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow/airflow.db
    entrypoint: /usr/local/bin/airflow-init.sh
    command: scheduler

  ingestion_service:
    build: ./ingestion_service
    restart: on-failure
    environment:
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      POSTGRES_HOST: postgres_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      postgres_db:
        condition: service_healthy

  data_quality_service:
    build: ./data_quality_service
    restart: on-failure
    environment:
      POSTGRES_HOST: postgres_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./data_quality_service/great_expectations:/app/great_expectations
      
  transformation_service:
    build: ./transformation_service
    restart: on-failure
    environment:
      - DBT_PROFILES_DIR=/app/dbt_project
      - POSTGRES_HOST=postgres_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./transformation_service/app/dbt_project:/app/dbt_project
    depends_on:
      postgres_db:
        condition: service_healthy

  superset_app:
    build: ./reporting_service
    restart: always
    ports:
      - "8088:8088"
    environment:
      FLASK_APP: superset
      SUPERSET_WEBSERVER_PORT: 8088
      SUPERSET_SECRET_KEY: "YOUR_SUPERSET_SECRET_KEY"
      DATABASE_HOSTNAME: postgres_db
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_DB: ${POSTGRES_DB}
    volumes:
      - ./reporting_service/app:/app/superset
    depends_on:
      postgres_db:
        condition: service_healthy
    entrypoint: /app/docker-init.sh
    command: ["gunicorn", "-w", "4", "--timeout", "120", "-b", "0.0.0.0:8088", "superset:create_app()"]
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8088/health"]
      interval: 30s
      timeout: 30s
      retries: 3

volumes:
  postgres_data:
    driver: local
  airflow_data:
  superset_data:
